name: "Cria√ß√£o de Infraestrutura b√°sica para as aplica√ß√µes"
on:
  push:
    branches: [main, develop]
  pull_request:
env:
  ENVIRONMENT: ${{ (github.ref_name == 'main' || github.event_name == 'pull_request') && 'prod' || 'dev' }}
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ env.ENVIRONMENT }}
    steps:
      - name: Set outputs
        run: echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
  cria_infra:
    name: "Cria√ß√£o de infra para aplica√ß√µes do techchallenge"
    needs: setup
    runs-on: ubuntu-latest
    env:
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4.2.2
      
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Realiza setup do Terraform
        run: ./setup.sh

      - name: Setup do Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.3"

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.ref_name == 'develop'
        run: terraform -chdir=terraform plan -no-color -input=false
        continue-on-error: true

      - name: Atualiza√ß√£o do Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          script: |
            const output = `#### Terraform - Formata√ß√£o e Estilo üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Init ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Valida√ß√£o ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Detalhes do Terraform Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Enviado por: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: (github.ref_name == 'main' || github.ref_name == 'develop') && github.event_name == 'push'
        run: terraform -chdir=terraform apply -auto-approve -input=false
      
